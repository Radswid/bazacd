package Db.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;



import Db.Dao;
import cdbase.Author;
import Db.DaoBase;
import Db.EntityBase;
import Db.HsqlUnitOfWork;

public class HsqlAuthorDao extends DaoBase<Author> implements Dao<Author> {

	
	private Statement stmt;
	private PreparedStatement insert;
	private PreparedStatement delete;
	private PreparedStatement update;
	private PreparedStatement getById;
	private PreparedStatement getAll;
	
	protected HsqlAuthorDao(HsqlUnitOfWork uow) {
		super(uow);
		try {
			Connection connection = uow.getConnection();
			stmt = connection.createStatement();
			
			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			
			boolean exists = false;
			while(rs.next())
			{
				if("author".equalsIgnoreCase(rs.getString("TABLE_NAME")))
				{
					exists = true;
					break;
				}
			}
			
			insert = connection.prepareStatement(""
					+ "INSERT INTO author(name,surname,band)"
					+ " VALUES(?,?,?)");
			
			getById = connection.prepareStatement(""
					+ "SELECT * FROM product WHERE id=?");
			
			delete = connection.prepareStatement("DELETE FROM product WHERE id=?");
			
			getAll = connection.prepareStatement("SELECT * FROM product");
			
			update = connection.prepareStatement(""
					+ "update product set"
					+ "(name,description,prize)=(?,?,?)"
					+ "where id=?");
			
			if(!exists)
			{
				stmt.executeUpdate(""
						+ "CREATE TABLE product("
						+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
						+ "name varchar(50),"
						+ "description varchar(500),"
						+ "prize double,"
						+ ")");
				
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}
		
	

	@Override
	public Author get(int id) {
		Author a = null;
		try {
			getById.setInt(1, id);
			ResultSet rs = getById.executeQuery();
			while(rs.next())
			{
				a = new Author();
				a.setId(rs.getInt("id"));
				a.setSurname(rs.getString("surname"));
				a.setBand(rs.getString("band"));
				a.setName(rs.getString("name"));
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return a;
	}

	@Override
	public List<Author> getAll() {
List<Author> cd = new ArrayList<Author>();
		
		try
		{
			ResultSet rs = getAll.executeQuery();
			while(rs.next()){
				
				Author a = new Author();
				a.setId(rs.getInt("id"));
				a.setSurname(rs.getString("surname"));
				a.setBand(rs.getString("band"));
				a.setName(rs.getString("name"));
				cd.add(a);
			}
		}
		
		catch(Exception ex)
		{
			ex.printStackTrace();
		}
		
		return cd;
	}

	@Override
	public void persistAdd(EntityBase entity) {
		Author ent = (Author)entity;
		try {
			insert.setString(1, ent.getName());
			insert.setString(2, ent.getSurname());
			insert.setString(3, ent.getBand());
			insert.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}

	@Override
	public void persistDelete(EntityBase entity) {
		Author ent = (Author) entity;
		try 
		{
			delete.setInt(1, ent.getId());
			delete.executeUpdate();

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@Override
	public void persistUpdate(EntityBase entity) {
		Author ent = (Author) entity;
		try
		{
			update.setString(1, ent.getName());
			update.setString(2, ent.getSurname());
			update.setString(3, ent.getBand());
			update.setInt(5, ent.getId());
			update.executeUpdate();
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
		}
		
		
	}
	
}
